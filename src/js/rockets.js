// ====== MISSION SELECTION MODAL ======
function renderMissionSelectList(rocket) {
    const missions = state.missions.filter(m => m.unlocked && (!m.launchWindow || Date.now() >= (m.lastLaunch || 0) + m.launchWindow) && state.reputation >= (m.reqReputation || 0));
    return missions.map(m => {
        let launchWindowTimer = '';
        if (m.launchWindow) {
            const lastLaunch = m.lastLaunch || 0;
            const nextWindow = lastLaunch + m.launchWindow;
            const remaining = Math.max(0, nextWindow - Date.now());
            launchWindowTimer = remaining > 0 ? ` <div class="timer">–û–∫–Ω–æ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑: ${formatTime(remaining)}</div>` : ' <div>–û–∫–Ω–æ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç–æ</div>';
        }
        return `
           <div class="mission-card">
             <div> <b>${m.name}</b> </div>
             <div class="desc">${m.desc}</div>
             <div>–ù–∞–≥—Ä–∞–¥–∞:  <span class="reward">${Math.floor(m.reward * (0.8 + Math.random() * 0.4))}‚ÇΩ, ${m.science}üî¨</span> </div>
             <div>–¢—Ä–µ–±—É–µ—Ç: ${m.fuel}‚õΩ, ${m.parts}üîß, ${m.reqReputation || 0}üèÖ</div>
            ${launchWindowTimer}
             <button onclick="startMission(${rocket.id},${m.id})" ${(state.fuel < m.fuel || state.parts < m.parts || state.rockets.filter(r => r.status !== "ready").length >= state.launchPadLevel) ? "disabled" : " "}>
               <i class="fas fa-rocket"></i> –ó–∞–ø—É—Å–∫
             </button>
           </div>
        `;
    }).join(" ");
}

function showMissionSelectModal(rocket) {
    lastMissionModalRocketId = rocket.id;
    let html = ` <div class="modal-bg"> <div class="modal">
         <h3>–í—ã–±–µ—Ä–∏—Ç–µ –º–∏—Å—Å–∏—é –¥–ª—è <span style="color:var(--accent)">${rocket.name}</span></h3>
         <div class="mission-list" id="missionListModal"> </div>
         <button class="closebtn" onclick="closeModal()"> <i class="fas fa-times"></i> –û—Ç–º–µ–Ω–∞</button>
       </div> </div>`;
    document.body.insertAdjacentHTML("beforeend", html);
    document.getElementById("missionListModal").innerHTML = renderMissionSelectList(rocket);
}

window.closeModal = function() {
    const m = document.querySelector('.modal-bg');
    if (m) m.remove();
    lastMissionModalRocketId = null;
};

// ====== ROCKET ACTIONS ======
window.addRocket = function(e) {
    e.preventDefault();
    const nm = document.getElementById('rocketName').value.trim() || "–†–∞–∫–µ—Ç–∞-" + state.nextRocketId;
    const buildCost = { money: 1200000, parts: 350, rocketParts: 50 };
    if (state.research.find(t => t.id === 4 && t.unlocked)) {
        buildCost.money *= 0.75;
        buildCost.parts *= 0.75;
        buildCost.rocketParts *= 0.75;
    }
    if (state.money >= buildCost.money && state.parts >= buildCost.parts && state.rocketParts >= buildCost.rocketParts) {
        state.money -= buildCost.money;
        state.parts -= buildCost.parts;
        state.rocketParts -= buildCost.rocketParts;
        state.rockets.push({ id: state.nextRocketId++, name: nm, level: 1, success: 0.5, status: "ready", launches: 0, lastMission: null, modules: [], damaged: false, condition: 100, prepStart: null });
        notify(`–ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–æ–≤–∞—è —Ä–∞–∫–µ—Ç–∞: <b>${nm}</b>!`, "good");
        renderAll();
    } else {
        notify("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏!", "bad");
    };
};

window.upgradeRocket = function(id) {
    const r = state.rockets.find(r => r.id === id);
    if (state.money >= 300000 && state.parts >= 1200 && state.science >= 10) {
        state.money -= 300000;
        state.parts -= 1200;
        state.science -= 10;
        r.level += 1;
        r.success = +(Math.min(r.success + 0.04, 0.9)).toFixed(3);
        notify(`–†–∞–∫–µ—Ç–∞ <b>${r.name}</b> —É–ª—É—á—à–µ–Ω–∞!`, "good");
        renderAll();
    } else {
        notify("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è!", "bad");
    }
};

window.disassembleRocket = function(id) {
    const idx = state.rockets.findIndex(r => r.id === id);
    if (idx < 0) return;
    if (!confirm("–†–∞–∑–æ–±—Ä–∞—Ç—å —Ä–∞–∫–µ—Ç—É? –í–µ—Ä–Ω—ë—Ç–µ –æ–∫–æ–ª–æ –ø–æ–ª–æ–≤–∏–Ω—ã —Ä–µ—Å—É—Ä—Å–æ–≤.")) return;
    const buildCost = { money: 1200000, parts: 350, rocketParts: 50 };
    if (state.research.find(t => t.id === 4 && t.unlocked)) {
        buildCost.money *= 0.75;
        buildCost.parts *= 0.75;
        buildCost.rocketParts *= 0.75;
    }
    state.money += Math.floor(buildCost.money * 0.5);
    state.parts += Math.floor(buildCost.parts * 0.5);
    state.rocketParts += Math.floor(buildCost.rocketParts * 0.5);
    state.rockets.splice(idx, 1);
    notify("–†–∞–∫–µ—Ç–∞ —Ä–∞–∑–æ–±—Ä–∞–Ω–∞, —á–∞—Å—Ç—å —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞!", "good");
    renderAll();
};

window.editRocket = function(id) {
    const r = state.rockets.find(r => r.id === id);
    const maxModules = state.research.find(t => t.id === 13 && t.unlocked) ? 4 : 2;
    let modulesList = ["–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä", "–¢–µ–ø–ª–æ–∑–∞—â–∏—Ç–∞", "–°–≤—è–∑—å", "–ú–∞–Ω–µ–≤—Ä–æ–≤—ã–π –º–æ–¥—É–ª—å", "–î–∞—Ç—á–∏–∫ —Ä–∞–¥–∏–∞—Ü–∏–∏"];
    let html = ` <div class="modal-bg"> <div class="modal">
         <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:  <input id="rocketRename" style="width:120px" value="${r.name}"> </h3>
         <div>–ú–æ–¥—É–ª–∏ (–º–∞–∫—Å. ${maxModules}): <br>
          ${modulesList.map(m => `
             <label> <input type="checkbox" class="editModule" value="${m}" ${r.modules && r.modules.includes(m) ? "checked" : " "} ${r.modules.length >= maxModules && !r.modules.includes(m) ? "disabled" : " "}/> ${m} (-50,000‚ÇΩ, -100üîß)</label> <br>
          `).join(" ")}
         </div>
         <button onclick="saveRocketEdit(${r.id})"> <i class="fas fa-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
         <button class="closebtn" onclick="closeModal()"> <i class="fas fa-times"></i> –û—Ç–º–µ–Ω–∞</button>
       </div> </div>`;
    document.body.insertAdjacentHTML("beforeend", html);
};

window.saveRocketEdit = function(id) {
    const r = state.rockets.find(r => r.id === id);
    const newModules = Array.from(document.querySelectorAll(".editModule:checked")).map(x => x.value);
    const maxModules = state.research.find(t => t.id === 13 && t.unlocked) ? 4 : 2;
    if (newModules.length > maxModules) {
        notify(`–ú–∞–∫—Å–∏–º—É–º ${maxModules} –º–æ–¥—É–ª—è!`, "bad");
        return;
    }
    const costPerModule = { money: 50000, parts: 100 };
    const totalCost = { money: costPerModule.money * newModules.length, parts: costPerModule.parts * newModules.length };
    if (state.money >= totalCost.money && state.parts >= totalCost.parts) {
        state.money -= totalCost.money;
        state.parts -= totalCost.parts;
        r.name = document.getElementById("rocketRename").value.trim() || r.name;
        r.modules = newModules;
        closeModal();
        notify("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", "good");
        renderAll();
    } else {
        notify("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª–µ–π!", "bad");
    }
};

window.techInspectRocket = function(id) {
    const r = state.rockets.find(r => r.id === id);
    let html = ` <div class="modal-bg"> <div class="modal">
         <h3>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä: ${r.name}</h3>
         <div>–£—Ä–æ–≤–µ–Ω—å: ${r.level}</div>
         <div>–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${r.condition}%${r.damaged ? "  <i class='fas fa-exclamation-triangle' style='color: var(--danger);'></i> " : " "}</div>
         <div>–°—Ç–∞—Ç—É—Å: ${rocketStatusLabel(r.status)}</div>
         <div>–®–∞–Ω—Å —É—Å–ø–µ—Ö–∞: ${(r.success * 100).toFixed(1)}%</div>
         <div>–ó–∞–ø—É—Å–∫–æ–≤: ${r.launches}</div>
         <div>–ú–æ–¥—É–ª–∏: ${r.modules && r.modules.length ? r.modules.join(", ") : "–Ω–µ—Ç"}</div>
         <div>–ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏—Å—Å–∏—è: ${r.lastMission || "-"}</div>
         <button class="closebtn" onclick="closeModal()"> <i class="fas fa-times"></i> –ó–∞–∫—Ä—ã—Ç—å</button>
       </div> </div>`;
    document.body.insertAdjacentHTML("beforeend", html);
};

window.repairRocket = function(id) {
    const r = state.rockets.find(r => r.id === id);
    if (r.damaged && state.parts >= 500 && state.rocketParts >= 250 && state.money >= 100000) {
        state.parts -= 500;
        state.rocketParts -= 250;
        state.money -= 100000;
        r.damaged = false;
        r.condition = 50;
        notify("–†–∞–∫–µ—Ç–∞ –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞!", "good");
        renderAll();
    } else if (r.damaged) {
        notify("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞!", "bad");
    }
};

window.launchRocket = function(id) {
    const r = state.rockets.find(r => r.id === id);
    if (!r || r.status !== "ready" || r.damaged) return;
    showMissionSelectModal(r);
};